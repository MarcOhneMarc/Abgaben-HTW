#BlueJ class context
comment0.target=DoppeltVerketteteListe
comment0.text=\r\n\ Eine\ doppelt\ verkettete\ Liste\ implementiert\ das\ List-Interface\ und\ erm\u00F6glicht\ den\ Zugriff\ auf\ Elemente\r\n\ in\ der\ Liste\ sowie\ das\ Hinzuf\u00FCgen,\ Entfernen\ und\ \u00C4ndern\ von\ Elementen.\r\n\r\n\ @param\ <E>\ der\ Typ\ der\ Elemente\ in\ der\ Liste\r\n
comment1.params=
comment1.target=DoppeltVerketteteListe()
comment1.text=\r\n\ Erstellt\ eine\ leere\ doppelt\ verkettete\ Liste.\r\n
comment10.params=index
comment10.target=java.lang.Object\ get(int)
comment10.text=\r\n\ Gibt\ das\ Element\ an\ einem\ bestimmten\ Index\ in\ der\ Liste\ zur\u00FCck.\r\n\r\n\ @param\ index\ der\ Index\ des\ Elements\r\n\ @return\ das\ Element\ an\ dem\ angegebenen\ Index\r\n\ @throws\ IndexOutOfBoundsException\ wenn\ der\ Index\ ung\u00FCltig\ ist\r\n
comment11.params=index\ element
comment11.target=java.lang.Object\ set(int,\ java.lang.Object)
comment11.text=\r\n\ \u00C4ndert\ das\ Element\ an\ einem\ bestimmten\ Index\ in\ der\ Liste.\r\n\r\n\ @param\ index\ \ \ der\ Index\ des\ Elements\r\n\ @param\ element\ das\ neue\ Element\r\n\ @return\ das\ alte\ Element\ an\ dem\ angegebenen\ Index\r\n\ @throws\ IndexOutOfBoundsException\ wenn\ der\ Index\ ung\u00FCltig\ ist\r\n
comment12.params=index\ element
comment12.target=void\ add(int,\ java.lang.Object)
comment12.text=\r\n\ F\u00FCgt\ ein\ Element\ an\ einem\ bestimmten\ Index\ in\ die\ Liste\ ein.\r\n\r\n\ @param\ index\ \ \ der\ Index,\ an\ dem\ das\ Element\ eingef\u00FCgt\ werden\ soll\r\n\ @param\ element\ das\ einzuf\u00FCgende\ Element\r\n\ @throws\ IndexOutOfBoundsException\ wenn\ der\ Index\ ung\u00FCltig\ ist\r\n
comment13.params=index
comment13.target=java.lang.Object\ remove(int)
comment13.text=\r\n\ Entfernt\ das\ Element\ an\ einem\ bestimmten\ Index\ aus\ der\ Liste.\r\n\r\n\ @param\ index\ der\ Index\ des\ zu\ entfernenden\ Elements\r\n\ @return\ das\ entfernte\ Element\r\n\ @throws\ IndexOutOfBoundsException\ wenn\ der\ Index\ ung\u00FCltig\ ist\r\n
comment14.params=o
comment14.target=int\ indexOf(java.lang.Object)
comment14.text=\r\n\ Gibt\ den\ Index\ des\ ersten\ Vorkommens\ eines\ bestimmten\ Elements\ in\ der\ Liste\ zur\u00FCck.\r\n\r\n\ @param\ o\ das\ Element,\ dessen\ Index\ gesucht\ wird\r\n\ @return\ der\ Index\ des\ Elements,\ oder\ -1,\ wenn\ das\ Element\ nicht\ gefunden\ wurde\r\n
comment15.params=element
comment15.target=void\ linkLast(java.lang.Object)
comment15.text=\r\n\ F\u00FCgt\ ein\ Element\ am\ Ende\ der\ Liste\ hinzu.\r\n\r\n\ @param\ element\ das\ hinzuzuf\u00FCgende\ Element\r\n
comment16.params=element\ succ
comment16.target=void\ linkBefore(java.lang.Object,\ DoppeltVerketteteListe.Node)
comment16.text=\r\n\ F\u00FCgt\ ein\ Element\ vor\ einem\ gegebenen\ Knoten\ in\ die\ Liste\ ein.\r\n\r\n\ @param\ element\ das\ einzuf\u00FCgende\ Element\r\n\ @param\ succ\ \ \ \ der\ Knoten,\ vor\ dem\ das\ Element\ eingef\u00FCgt\ werden\ soll\r\n
comment17.params=node
comment17.target=java.lang.Object\ unlink(DoppeltVerketteteListe.Node)
comment17.text=\r\n\ Entfernt\ einen\ Knoten\ aus\ der\ Liste.\r\n\r\n\ @param\ node\ der\ zu\ entfernende\ Knoten\r\n\ @return\ das\ Element\ des\ entfernten\ Knotens\r\n
comment18.params=index
comment18.target=DoppeltVerketteteListe.Node\ nodeAt(int)
comment18.text=\r\n\ Gibt\ den\ Knoten\ an\ einem\ bestimmten\ Index\ in\ der\ Liste\ zur\u00FCck.\r\n\r\n\ @param\ index\ der\ Index\ des\ Knotens\r\n\ @return\ der\ Knoten\ an\ dem\ angegebenen\ Index\r\n\ @throws\ IndexOutOfBoundsException\ wenn\ der\ Index\ ung\u00FCltig\ ist\r\n
comment19.params=index
comment19.target=void\ checkElementIndex(int)
comment19.text=\r\n\ \u00DCberpr\u00FCft,\ ob\ der\ Index\ f\u00FCr\ den\ Zugriff\ auf\ Elemente\ in\ der\ Liste\ g\u00FCltig\ ist.\r\n\r\n\ @param\ index\ der\ zu\ \u00FCberpr\u00FCfende\ Index\r\n\ @throws\ IndexOutOfBoundsException\ wenn\ der\ Index\ ung\u00FCltig\ ist\r\n
comment2.params=
comment2.target=int\ size()
comment2.text=\r\n\ Gibt\ die\ Anzahl\ der\ Elemente\ in\ der\ Liste\ zur\u00FCck.\r\n\r\n\ @return\ die\ Anzahl\ der\ Elemente\ in\ der\ Liste\r\n
comment20.params=index
comment20.target=void\ checkPositionIndex(int)
comment20.text=\r\n\ \u00DCberpr\u00FCft,\ ob\ der\ Index\ f\u00FCr\ das\ Einf\u00FCgen\ und\ Entfernen\ von\ Elementen\ in\ der\ Liste\ g\u00FCltig\ ist.\r\n\r\n\ @param\ index\ der\ zu\ \u00FCberpr\u00FCfende\ Index\r\n\ @throws\ IndexOutOfBoundsException\ wenn\ der\ Index\ ung\u00FCltig\ ist\r\n
comment21.params=index
comment21.target=boolean\ isElementIndex(int)
comment21.text=\r\n\ \u00DCberpr\u00FCft,\ ob\ der\ Index\ ein\ g\u00FCltiger\ Index\ f\u00FCr\ den\ Zugriff\ auf\ Elemente\ in\ der\ Liste\ ist.\r\n\r\n\ @param\ index\ der\ zu\ \u00FCberpr\u00FCfende\ Index\r\n\ @return\ true,\ wenn\ der\ Index\ g\u00FCltig\ ist,\ ansonsten\ false\r\n
comment22.params=index
comment22.target=boolean\ isPositionIndex(int)
comment22.text=\r\n\ \u00DCberpr\u00FCft,\ ob\ der\ Index\ ein\ g\u00FCltiger\ Index\ f\u00FCr\ das\ Einf\u00FCgen\ und\ Entfernen\ von\ Elementen\ in\ der\ Liste\ ist.\r\n\r\n\ @param\ index\ der\ zu\ \u00FCberpr\u00FCfende\ Index\r\n\ @return\ true,\ wenn\ der\ Index\ g\u00FCltig\ ist,\ ansonsten\ false\r\n
comment23.params=
comment23.target=java.util.Iterator\ iterator()
comment24.params=
comment24.target=java.lang.Object[]\ toArray()
comment25.params=c
comment25.target=boolean\ containsAll(java.util.Collection)
comment26.params=index\ c
comment26.target=boolean\ addAll(int,\ java.util.Collection)
comment27.params=c
comment27.target=boolean\ removeAll(java.util.Collection)
comment28.params=c
comment28.target=boolean\ retainAll(java.util.Collection)
comment29.params=o
comment29.target=int\ lastIndexOf(java.lang.Object)
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\r\n\ \u00DCberpr\u00FCft,\ ob\ die\ Liste\ keine\ Elemente\ enth\u00E4lt.\r\n\r\n\ @return\ true,\ wenn\ die\ Liste\ keine\ Elemente\ enth\u00E4lt,\ ansonsten\ false\r\n
comment30.params=
comment30.target=java.util.ListIterator\ listIterator()
comment31.params=index
comment31.target=java.util.ListIterator\ listIterator(int)
comment32.params=fromIndex\ toIndex
comment32.target=java.util.List\ subList(int,\ int)
comment4.params=o
comment4.target=boolean\ contains(java.lang.Object)
comment4.text=\r\n\ \u00DCberpr\u00FCft,\ ob\ die\ Liste\ ein\ bestimmtes\ Element\ enth\u00E4lt.\r\n\r\n\ @param\ o\ das\ Element,\ das\ \u00FCberpr\u00FCft\ werden\ soll\r\n\ @return\ true,\ wenn\ das\ Element\ in\ der\ Liste\ enthalten\ ist,\ ansonsten\ false\r\n
comment5.params=a
comment5.target=java.lang.Object[]\ toArray(java.lang.Object[])
comment5.text=\r\n\ Gibt\ ein\ Array\ zur\u00FCck,\ das\ alle\ Elemente\ in\ der\ Liste\ enth\u00E4lt.\r\n\r\n\ @param\ a\ das\ Array,\ in\ das\ die\ Elemente\ kopiert\ werden\ sollen\r\n\ @param\ <T>\ der\ Typ\ des\ Arrays\r\n\ @return\ ein\ Array\ mit\ den\ Elementen\ der\ Liste\r\n
comment6.params=e
comment6.target=boolean\ add(java.lang.Object)
comment6.text=\r\n\ F\u00FCgt\ ein\ Element\ am\ Ende\ der\ Liste\ hinzu.\r\n\r\n\ @param\ e\ das\ hinzuzuf\u00FCgende\ Element\r\n\ @return\ true,\ wenn\ das\ Element\ erfolgreich\ hinzugef\u00FCgt\ wurde,\ ansonsten\ false\r\n
comment7.params=o
comment7.target=boolean\ remove(java.lang.Object)
comment7.text=\r\n\ Entfernt\ das\ erste\ Vorkommen\ eines\ bestimmten\ Elements\ aus\ der\ Liste.\r\n\r\n\ @param\ o\ das\ zu\ entfernende\ Element\r\n\ @return\ true,\ wenn\ das\ Element\ erfolgreich\ entfernt\ wurde,\ ansonsten\ false\r\n
comment8.params=c
comment8.target=boolean\ addAll(java.util.Collection)
comment8.text=\r\n\ F\u00FCgt\ alle\ Elemente\ einer\ gegebenen\ Collection\ am\ Ende\ der\ Liste\ hinzu.\r\n\r\n\ @param\ c\ die\ Collection,\ deren\ Elemente\ hinzugef\u00FCgt\ werden\ sollen\r\n\ @return\ true,\ wenn\ die\ Liste\ erfolgreich\ ge\u00E4ndert\ wurde,\ ansonsten\ false\r\n
comment9.params=
comment9.target=void\ clear()
comment9.text=\r\n\ Entfernt\ alle\ Elemente\ aus\ der\ Liste.\r\n
numComments=33
