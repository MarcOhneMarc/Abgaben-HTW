#BlueJ class context
comment0.target=Consumer
comment0.text=\r\n\ Beschreiben\ Sie\ hier\ die\ Klasse\ Consumer.\r\n\r\n\ @JonasNeu_MarcPerwak\r\n
comment1.params=
comment1.target=Consumer()
comment2.params=number
comment2.target=void\ consume(int)
comment2.text=\r\n\ Diese\ Methode\ nimmt\ einen\ Integer\ entgegen\ und\ \r\n\ berechnet\ die\ Quersumme\ mit\ Zeitangabe.\r\n\ \r\n\ @param\ number\ Die\ Zahl,\ dessen\ Quersumme\ berechnet\ werden\ soll.\r\n
comment3.params=number
comment3.target=int\ calculateCrossTotal(int)
comment4.params=
comment4.target=int\ numberOfDifferentResults()
comment4.text=\r\n\ \ gibt\ an,\ wie\ viele\ unterschiedliche\ Quersummen\ berechnet\ wurden\r\n
comment5.params=number
comment5.target=int\ numberOfOccurrences(int)
comment5.text=\r\n\ \ gibt\ f\u00FCr\ einen\ gegebenen\ Integer\ an,\ wie\ h\u00E4ufig\ dieser\ als\ Ergebnis\ einer\ Berechnung\ vorkam\r\n
comment6.params=
comment6.target=java.util.Collection\ getCrossTotalsAscending()
comment6.text=\r\n\ \ gibt\ eine\ Collection\ zur\u00FCck,\ welche\ die\ berechneten\ Quersummen\ in\ aufsteigender\ Reihenfolge\ enth\u00E4lt\r\n
comment7.params=
comment7.target=java.util.Collection\ getCrossTotalsDescending()
comment7.text=\r\n\ \ gibt\ eine\ Collection\ zur\u00FCck,\ welche\ die\ berechneten\ Quersummen\ in\ absteigender\ Reihenfolge\ enth\u00E4lt.\r\n
comment8.params=number
comment8.target=java.util.Collection\ getTimestampsForResult(int)
comment8.text=\r\n\ \ nimmt\ einen\ Integer\ entgegen\ und\ gibt\ eine\ Collection\ zur\u00FCck,\r\n\ \ welche\ alle\ zugeh\u00F6rigen\ Zeitstempel\ enth\u00E4lt.\ D.h.\ die\ Zeitstempel\ der\ Berechnungen,\ die\r\n\ \ zu\ dem\ gegebenen\ Ergebnis\ gef\u00FChrt\ haben.\r\n
numComments=9
